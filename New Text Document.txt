"""

#Our Aim to detect someone have diabetes or not

#Import the libraries
import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from PIL import Image
import streamlit as st

#Create title and sub
st.write("""
# Diabetes Detection
###Detect if someone has diabetes using ML @ Python
""")

#Open and Display cover image
image = Image.open('S:/Machine_Learning/posterr.jpg')
st.image(image, caption='ML', use_column_width=True)

#Get the data
df = pd.read_csv('S:/Machine_Learning/diabetes.csv')

#Set subheader
st.subheader('Data Information:')

#Show the data as a table
st.dataframe(df)

#Show statistic on the data
st.write(df.describe())

#Show the data as a chart
chart = st.bar_chart(df)

#Split data into independent 'X' and dependent 'Y' variables
X =df.iloc[:, 0:8].values
Y =df.iloc[:, -1].values

st.write(X)
st.write(Y)

#Split data into 70% training and 30% testing
X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.30, random_state=0)

st.write(X_train.shape)
st.write(X_test.shape)
st.write(Y_train.shape)
st.write(Y_test.shape)

#Get the feature input from user
def get_user_input():
    pregnancies = st.sidebar.slider('pregnancies', 0, 17, 3)
    glucose = st.sidebar.slider('glucose', 0, 199, 117)
    blood_pressure = st.sidebar.slider('blood_pressure', 0, 122, 72)
    skin_thickness = st.sidebar.slider('skin_thickness', 0, 99, 23)
    insulin = st.sidebar.slider('insulin', 0.0, 846.0, 30.0)
    BMI = st.sidebar.slider('BMI', 0.0, 67.1, 32.0)
    DPF = st.sidebar.slider('DPF', 0.078, 2.42, 0.3725)
    age = st.sidebar.slider('age', 21, 81, 29)
    
    #Store dictionary into a variable
    user_data = {'pregnancies': pregnancies,
                 'glucose': glucose,
                 'blood_pressure': blood_pressure,
                 'skin_thickness': skin_thickness,
                 'insulin':insulin,
                 'BMI': BMI,
                 'DPF': DPF,
                 'age': age
                 }
    #Transform the data into data frame
    features = pd.DataFrame(user_data, index = [0])
    return features
    
#Store the user input into variable
user_input = get_user_input()

#Set a subheader and display users input
st.subheader('User Input:')
st.write(user_input)

#Create and train the model 
RandomForestClassifier = RandomForestClassifier(n_estimators = 1000)
RandomForestClassifier.fit(X_train, Y_train)

#Show models metrics
#st.subheader('Model Test Accuracy Score:')
#st.write( str(accuracy_score(Y_test, RandomForestClassifier.predict(X_test)) * 100) + '%' )


# Use the forest's predict method on the test data
predictions = RandomForestClassifier.predict(X_test) # Calculate the absolute errors
print('Predictions : ', predictions)
errors = abs(predictions - Y_test) # Print out the mean absolute error (mae)
print('Errors : ', errors)
st.write('Mean Absolute Error:', round(np.mean(errors), 2), 'degrees.')

# Calculate mean absolute percentage error (MAPE)
mape = 100 * (errors / Y_test) # Calculate and display accuracy
print(mape)
accuracy = 100 - np.mean(mape)
st.write('Accuracy:', round(accuracy, 2), '%.')



#Store the models predictions in a variables
prediction = RandomForestClassifier.predict(user_input)

#Set a subheader and display classification
st.subheader('Classification: ')
st.write(prediction)

"""